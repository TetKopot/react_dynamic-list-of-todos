{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","GetVisibleTodos.tsx","index.tsx"],"names":["TodoList","memo","todos","onSelectedTodo","selectedTodoId","className","map","todo","id","completed","title","type","onClick","TodoFilter","onChangeQuery","onChangeComplitedFilter","onClearQueryFilter","query","complitedFilter","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onCloseModal","useState","user","setUser","useEffect","a","userFromServer","fetchUser","href","name","App","setTodos","setSelectedTodoId","setQuery","completedFilter","setCompletedFilter","handleSelectTodo","useCallback","handleQuery","str","toLowerCase","deleteQuery","handleFilter","closeModal","selectedTodo","useMemo","find","visibleTodos","status","filter","isCompleted","isIncluded","includes","getVisibleTodos","loadedTodo","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3a700ff.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos:Todo[];\n  onSelectedTodo: (id: number) => void;\n  selectedTodoId: number;\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  onSelectedTodo,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelectedTodo(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={selectedTodoId === todo.id\n                  ? 'far fa-eye-slash'\n                  : 'far fa-eye'}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import { FC, memo } from 'react';\n\ninterface Props {\n  onChangeQuery: (str: string) => void;\n  onChangeComplitedFilter: (str: string) => void;\n  query: string;\n  complitedFilter: string;\n  onClearQueryFilter: () => void;\n}\n\nexport const TodoFilter: FC<Props> = memo(({\n  onChangeQuery,\n  onChangeComplitedFilter,\n  onClearQueryFilter,\n  query,\n  complitedFilter,\n}) => (\n\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={complitedFilter}\n          onChange={(event) => onChangeComplitedFilter(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onChangeQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onClearQueryFilter}\n          />\n        </span>\n      )}\n\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect, memo } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onCloseModal: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({ todo, onCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    async function fetchUser() {\n      const userFromServer = await getUser(todo.userId);\n\n      setUser(userFromServer);\n    }\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-completed\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong> }\n\n              {' by '}\n\n              <a href={`mailto:${user.name}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getVisibleTodos } from './GetVisibleTodos';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [completedFilter, setCompletedFilter] = useState('all');\n\n  const handleSelectTodo = useCallback((id: number) => {\n    setSelectedTodoId(id);\n  }, []);\n\n  const handleQuery = useCallback((str: string) => {\n    setQuery(str.toLowerCase());\n  }, []);\n\n  const deleteQuery = useCallback(() => setQuery(''), []);\n\n  const handleFilter = useCallback((str: string) => setCompletedFilter(str), []);\n  const closeModal = useCallback(() => setSelectedTodoId(0), []);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId)\n  ), [selectedTodoId]);\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todos, query, completedFilter)\n  ), [query, completedFilter, todos]);\n\n  useEffect(() => {\n    getTodos()\n      .then((loadedTodo) => setTodos(loadedTodo));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeQuery={handleQuery}\n                onChangeComplitedFilter={handleFilter}\n                query={query}\n                complitedFilter={completedFilter}\n                onClearQueryFilter={deleteQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodoId}\n                  onSelectedTodo={handleSelectTodo}\n                />\n              ) : (\n                <Loader />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} onCloseModal={closeModal} />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  status: string,\n) => {\n  if (status !== 'all' || query) {\n    return todos.filter(todo => {\n      const isIncluded = todo.title.toLowerCase().includes(query);\n      let isCompleted;\n\n      switch (status) {\n        case 'active':\n          isCompleted = todo.completed === false;\n          break;\n\n        case 'completed':\n          isCompleted = todo.completed === true;\n          break;\n\n        default:\n          isCompleted = true;\n          break;\n      }\n\n      return isIncluded && isCompleted;\n    });\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}